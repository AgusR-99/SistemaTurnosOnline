@using Microsoft.AspNetCore.SignalR.Client
@using SistemaTurnosOnline.Shared
@using SistemaTurnosOnline.Shared.Turnos
@using SistemaTurnosOnline.Web.Authentication
@using SistemaTurnosOnline.Web.Components.ToastComponent.Parent
@using SistemaTurnosOnline.Web.Components.ToastComponent.SuccessToast
@using SistemaTurnosOnline.Web.Extensions
@using SistemaTurnosOnline.Web.Pages
@using System.Security.Claims
@using SistemaTurnosOnline.Web.Utils.ToastFactoryUtils
@using SistemaTurnosOnline.Web.Utils.ToastFactoryUtils.Creators
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime Js

<PageTitle>SistemaTurnosOnline.Web</PageTitle>

<div class="page">
    <AuthorizeView>
        <Authorized>
            <div class="sidebar">
                <NavMenu/>
            </div>
        </Authorized>
    </AuthorizeView>

    <main>
        <div class="top-row justify-content-between px-4 bg-dark border-dark">
            <a class="text-light" href="/"><b class="m-0 display-font">﻿I.S.F.T. Nº 189</b></a>
            <div>
                <a href="https://github.com/AgusR-99/SistemaTurnosOnline" target="_blank">About</a>
                <AuthorizeView>
                    <Authorized>
                        <a @onclick="Logout_Click" href="javascript:void(0)">Cerrar sesion</a>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

        <article>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <SuccessToast
                        Id="@NewUserToast.Id"
                        Text="@NewUserToast.Text"
                        Title="@NewUserToast.Title"/>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView>
                <Authorized>
                    <SuccessToast
                        Id="@FirstInQueueToast.Id"
                        Text="@FirstInQueueToast.Text"
                        Title="@FirstInQueueToast.Title" />
                </Authorized>
            </AuthorizeView>
            <CascadingValue Value="@ServerErrorToast" Name="ServerErrorToast" IsFixed="true">
                <ErrorBoundary @ref="errorBoundary">
                    <ChildContent>
                        @Body
                    </ChildContent>
                    <ErrorContent>
                        <div class="container">
                            <h1>Oops...</h1>
                            <h4>Parece que algo salio mal y no pudimos procesar la solicitud.</h4>
                        </div>
                        <div class="alert alert-info d-flex m-0 align-items-center" role="alert">
                            <i class="me-2 fa-solid fa-info-circle"></i>
                            <div class="text-light">
                                Contactese con administracion
                            </div>
                        </div>
                    </ErrorContent>
                </ErrorBoundary>
            </CascadingValue>
            <DangerToast Id="@ServerErrorToast.Id" Text="@ServerErrorToast.Text" Title="@ServerErrorToast.Title"></DangerToast>
        </article>
    </main>
</div>

@code
{
    private ErrorBoundary? errorBoundary;

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    public ToastModel ServerErrorToast = ToastFactory.CreateToast(new ServerErrorToastCreator());

    private HubConnection UserActivationHubConnection { get; set; }

    private HubConnection TurnoHubConnection { get; set; }

    public ToastModel NewUserToast = ToastFactory.CreateToast(new NewUserToastCreator());

    public ToastModel FirstInQueueToast = ToastFactory.CreateToast(new FirstInQueueToastCreator());

    private async Task Logout_Click()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

        await customAuthStateProvider.UpdateAuthenticationState(null);

        NavigationManager.NavigateTo("/sign-in", true);
    }

    protected override async Task OnInitializedAsync()
    {
        UserActivationHubConnection = HubConnectionFactory.CreateHubConnection("/inactiveUsersHub", NavigationManager);
        TurnoHubConnection = HubConnectionFactory.CreateHubConnection("/turnohub", NavigationManager);

        var authState = await AuthenticationState;

        UserActivationHubConnection.On<Profesor>("ReceiveInformation", async (receiveInfo) =>
        {
            if (authState.User.IsInRole("Admin"))
            {
                await NewUserToast.Show(Js);
            }
        });

        TurnoHubConnection.On<Turno>("ReceiveInformation", async (turnoInfo) =>
        {
            if (authState.User != null && authState.User.Identity.IsAuthenticated)
            {
                var userId = AuthStateUtils.GetUserIdFromAuthState(authState);

                if (userId == turnoInfo.UserId && turnoInfo.OrdenEnCola == 1)
                {
                    await FirstInQueueToast.Show(Js);
                }
            }
        });

        await UserActivationHubConnection.StartAsync();

        await TurnoHubConnection.StartAsync();
    }
}
