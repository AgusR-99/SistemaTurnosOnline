@using Microsoft.AspNetCore.SignalR.Client
@using SistemaTurnosOnline.Shared
@using SistemaTurnosOnline.Shared.Turnos
@using SistemaTurnosOnline.Web.Authentication
@using SistemaTurnosOnline.Web.Components.ToastComponent.Parent
@using SistemaTurnosOnline.Web.Extensions
@using SistemaTurnosOnline.Web.Pages
@using System.Security.Claims
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime Js

<PageTitle>SistemaTurnosOnline.Web</PageTitle>

<div class="page">
    <AuthorizeView>
        <Authorized>
            <div class="sidebar">
                <NavMenu/>
            </div>
        </Authorized>
    </AuthorizeView>

    <main>
        <div class="top-row justify-content-between px-4 bg-dark border-dark">
            <a class="text-light" href="/"><b class="m-0 display-font">﻿I.S.F.T. Nº 189</b></a>
            <div>
                <a href="https://github.com/AgusR-99/SistemaTurnosOnline" target="_blank">About</a>
                <AuthorizeView>
                    <Authorized>
                        <a @onclick="Logout_Click" href="javascript:void(0)">Cerrar sesion</a>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

        <article>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <ToastLegacy Id="@Toast.Id" HeaderClass="@Toast.HeaderClass" Icon="@Toast.Icon" Title="@Toast.Title" Text="@Toast.Text" Time="@Toast.Time"></ToastLegacy>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView>
                <Authorized>
                    <ToastLegacy Id="@ToastTurno.Id" HeaderClass="@ToastTurno.HeaderClass" Icon="@ToastTurno.Icon" Title="@ToastTurno.Title" Text="@ToastTurno.Text" Time="@ToastTurno.Time"></ToastLegacy>
                </Authorized>
            </AuthorizeView>
            <CascadingValue Value="@ServerErrorToast" Name="ServerErrorToast" IsFixed="true">
                @Body
            </CascadingValue>
            <DangerToast Id="@ServerErrorToast.Id" Text="@ServerErrorToast.Text" Title="@ServerErrorToast.Title"></DangerToast>
        </article>
    </main>
</div>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    public ToastModel ServerErrorToast = ToastFactory.CreateServerErrorToast();

    private HubConnection UserActivationHubConnection { get; set; }

    private HubConnection TurnoHubConnection { get; set; }

    public ToastModelLegacy Toast { get; set; } =
            new ToastModelLegacy(
                status: ToastModelLegacy.Status.Error,
                id: "toastSuccess",
                headerClass: "bg-success",
                icon: "oi oi-circle-check",
                title: "Nueva solicitud",
                time: "Ahora",
                text: "Ha recibido una nueva solicitud de registro"
            );

    public ToastModelLegacy ToastTurno { get; set; } =
    new ToastModelLegacy(
        status: ToastModelLegacy.Status.Error,
        id: "toastSuccessTurno",
        headerClass: "bg-success",
        icon: "oi oi-circle-check",
        title: "Estado de turno",
        time: "Ahora",
        text: "Su turno esta primero en cola"
    );

    private async Task Logout_Click()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

        await customAuthStateProvider.UpdateAuthenticationState(null);

        NavigationManager.NavigateTo("/sign-in", true);
    }

    private async Task ShowNotification(Turno turnoInfo)
    {
        if (turnoInfo.Descripcion != "Sin descripcion")
        {
            ToastTurno.Text = $"Su turno esta primero en cola: \"{turnoInfo.Descripcion}\"";
        }
        else
        {
            ToastTurno.Text = $"Su turno esta primero en cola";
        }

        await InvokeAsync(StateHasChanged);

        await ToastTurno.Id.ShowToast(Js);
    }

    protected override async Task OnInitializedAsync()
    {
        UserActivationHubConnection = HubConnectionFactory.CreateHubConnection("/inactiveUsersHub", NavigationManager);
        TurnoHubConnection = HubConnectionFactory.CreateHubConnection("/turnohub", NavigationManager);

        var authState = await AuthenticationState;

        UserActivationHubConnection.On<Profesor>("ReceiveInformation", async (receiveInfo) =>
        {
            if (authState.User.IsInRole("Admin"))
            {
                await Toast.Id.ShowToast(Js);
            }
        });

        TurnoHubConnection.On<Turno>("ReceiveInformation", async (turnoInfo) =>
        {
            if (authState.User != null && authState.User.Identity.IsAuthenticated)
            {
                var userId = AuthStateUtils.GetUserIdFromAuthState(authState);

                if (userId == turnoInfo.UserId && turnoInfo.OrdenEnCola == 1)
                {
                    await ShowNotification(turnoInfo);
                }
            }
        });

        await UserActivationHubConnection.StartAsync();

        await TurnoHubConnection.StartAsync();
    }
}
